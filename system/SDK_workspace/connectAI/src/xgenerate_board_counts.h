// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2012.2
// Copyright (C) 2012 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef XGENERATE_BOARD_COUNTS_H
#define XGENERATE_BOARD_COUNTS_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#include "xgenerate_board_counts_ctrl.h"

/**************************** Type Definitions ******************************/
typedef struct {
    u16 DeviceId; // currently not used
    u32 Ctrl_BaseAddress;
} XGenerate_board_counts_Config;

typedef struct {
    u32 Ctrl_BaseAddress;
    u32 IsReady;
} XGenerate_board_counts;

/***************** Macros (Inline Functions) Definitions *********************/
#define XGenerate_board_counts_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))

#define XGenerate_board_counts_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))

/************************** Function Prototypes *****************************/
int XGenerate_board_counts_Initialize(XGenerate_board_counts *InstancePtr, XGenerate_board_counts_Config *ConfigPtr);

void XGenerate_board_counts_Start(XGenerate_board_counts *InstancePtr);
u32 XGenerate_board_counts_IsDone(XGenerate_board_counts *InstancePtr);
u32 XGenerate_board_counts_IsIdle(XGenerate_board_counts *InstancePtr);

void XGenerate_board_counts_SetBoard_addr(XGenerate_board_counts *InstancePtr, u32 Data);
u32 XGenerate_board_counts_GetBoard_addr(XGenerate_board_counts *InstancePtr);
void XGenerate_board_counts_SetResult_addr(XGenerate_board_counts *InstancePtr, u32 Data);
u32 XGenerate_board_counts_GetResult_addr(XGenerate_board_counts *InstancePtr);

void XGenerate_board_counts_InterruptGlobalEnable(XGenerate_board_counts *InstancePtr);
void XGenerate_board_counts_InterruptGlobalDisable(XGenerate_board_counts *InstancePtr);
void XGenerate_board_counts_InterruptEnable(XGenerate_board_counts *InstancePtr, u32 Mask);
void XGenerate_board_counts_InterruptDisable(XGenerate_board_counts *InstancePtr, u32 Mask);
void XGenerate_board_counts_InterruptClear(XGenerate_board_counts *InstancePtr, u32 Mask);
u32 XGenerate_board_counts_InterruptGetEnabled(XGenerate_board_counts *InstancePtr);
u32 XGenerate_board_counts_InterruptGetStatus(XGenerate_board_counts *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
