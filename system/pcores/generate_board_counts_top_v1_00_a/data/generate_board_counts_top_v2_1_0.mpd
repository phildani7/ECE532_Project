## ==============================================================
## File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
## Version: 2012.2
## Copyright (C) 2012 Xilinx Inc. All rights reserved.
## 
## ==============================================================


BEGIN generate_board_counts_top

## Peripheral Options
OPTION IPTYPE = PERIPHERAL
OPTION IMP_NETLIST = TRUE
OPTION HDL = VERILOG
OPTION ARCH_SUPPORT_MAP = (spartan6=DEVELOPMENT)
OPTION IP_GROUP = MICROBLAZE:PPC:USER
OPTION DESC = generate_board_counts_top

# OPTION STYLE = MIX
# OPTION RUN_NGCBUILD = TRUE

PARAMETER RESET_ACTIVE_LOW = 1, DT = integer, RANGE = (0, 1)
PORT SYS_CLK = "", DIR = I, SIGIS = Clk, ASSIGNMENT = REQUIRE
PORT SYS_RESET = "", DIR = I, SIGIS = Rst, ASSIGNMENT = REQUIRE


#####################AXI4-Lite Slave####################
## Bus Interfaces
BUS_INTERFACE BUS = S_AXI_CTRL, BUS_STD = AXI, BUS_TYPE = SLAVE
## Generics for VHDL or Parameters for Verilog
PARAMETER C_S_AXI_CTRL_BASEADDR = 0xffffffff, DT = std_logic_vector(31 downto 0), ADDR_TYPE = REGISTER, ASSIGNMENT = REQUIRE, PAIR = C_S_AXI_CTRL_HIGHADDR, ADDRESS = BASE, MIN_SIZE = 0x1000, TYPE = NON_HDL, BUS = S_AXI_CTRL
PARAMETER C_S_AXI_CTRL_HIGHADDR = 0x00000000, DT = std_logic_vector(31 downto 0), ADDR_TYPE = REGISTER, ASSIGNMENT = REQUIRE, PAIR = C_S_AXI_CTRL_BASEADDR, ADDRESS = HIGH, TYPE = NON_HDL, BUS = S_AXI_CTRL
PARAMETER C_S_AXI_CTRL_ADDR_WIDTH = 32, DT = INTEGER, ASSIGNMENT = CONSTANT, BUS = S_AXI_CTRL
PARAMETER C_S_AXI_CTRL_DATA_WIDTH = 32, DT = INTEGER, ASSIGNMENT = CONSTANT, BUS = S_AXI_CTRL
PARAMETER C_S_AXI_CTRL_PROTOCOL = AXI4LITE, DT = STRING, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, BUS = S_AXI_CTRL
## Ports
PORT s_axi_ctrl_ACLK = "", DIR = I, SIGIS = CLK, BUS = S_AXI_CTRL, ASSIGNMENT = REQUIRE
PORT s_axi_ctrl_ARESETN = ARESETN, DIR = I, SIGIS = RST, BUS = S_AXI_CTRL
PORT s_axi_ctrl_AWADDR = AWADDR, DIR = I, VEC = [(C_S_AXI_CTRL_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI_CTRL
PORT s_axi_ctrl_AWVALID = AWVALID, DIR = I, BUS = S_AXI_CTRL
PORT s_axi_ctrl_AWREADY = AWREADY, DIR = O, BUS = S_AXI_CTRL
PORT s_axi_ctrl_WDATA = WDATA, DIR = I, VEC = [(C_S_AXI_CTRL_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI_CTRL
PORT s_axi_ctrl_WSTRB = WSTRB, DIR = I, VEC = [((C_S_AXI_CTRL_DATA_WIDTH/8)-1):0], ENDIAN = LITTLE, BUS = S_AXI_CTRL
PORT s_axi_ctrl_WVALID = WVALID, DIR = I, BUS = S_AXI_CTRL
PORT s_axi_ctrl_WREADY = WREADY, DIR = O, BUS = S_AXI_CTRL
PORT s_axi_ctrl_BRESP = BRESP, DIR = O, VEC = [1:0], BUS = S_AXI_CTRL
PORT s_axi_ctrl_BVALID = BVALID, DIR = O, BUS = S_AXI_CTRL
PORT s_axi_ctrl_BREADY = BREADY, DIR = I, BUS = S_AXI_CTRL
PORT s_axi_ctrl_ARADDR = ARADDR, DIR = I, VEC = [(C_S_AXI_CTRL_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI_CTRL
PORT s_axi_ctrl_ARVALID = ARVALID, DIR = I, BUS = S_AXI_CTRL
PORT s_axi_ctrl_ARREADY = ARREADY, DIR = O, BUS = S_AXI_CTRL
PORT s_axi_ctrl_RDATA = RDATA, DIR = O, VEC = [(C_S_AXI_CTRL_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI_CTRL
PORT s_axi_ctrl_RRESP = RRESP, DIR = O, VEC = [1:0], BUS = S_AXI_CTRL
PORT s_axi_ctrl_RVALID = RVALID, DIR = O, BUS = S_AXI_CTRL
PORT s_axi_ctrl_RREADY = RREADY, DIR = I, BUS = S_AXI_CTRL
PORT interrupt = "", DIR = O, SIGIS = INTERRUPT, SENSITIVITY = LEVEL_HIGH, INTERRUPT_PRIORITY = MEDIUM
########################################################


#####################AXI4 Master########################
## Bus Interfaces
BUS_INTERFACE BUS = M_AXI_MASTER, BUS_STD = AXI, BUS_TYPE = MASTER
## Generics for VHDL or Parameters for Verilog
PARAMETER C_M_AXI_MASTER_SUPPORTS_THREADS = 0, DT = integer, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = M_AXI_MASTER
PARAMETER C_M_AXI_MASTER_PROTOCOL = AXI4, DT = string, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = M_AXI_MASTER
PARAMETER C_M_AXI_MASTER_SUPPORTS_READ = 1, DT = integer, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = M_AXI_MASTER
PARAMETER C_M_AXI_MASTER_SUPPORTS_WRITE = 1, DT = integer, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = M_AXI_MASTER
PARAMETER C_M_AXI_MASTER_SUPPORTS_USER_SIGNALS = 0, DT = integer, TYPE = NON_HDL, BUS = M_AXI_MASTER
PARAMETER C_M_AXI_MASTER_SUPPORTS_NARROW_BURST = 1, DT = integer, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, BUS = M_AXI_MASTER
PARAMETER C_M_AXI_MASTER_THREAD_ID_WIDTH = 1, DT = integer, BUS = M_AXI_MASTER
PARAMETER C_M_AXI_MASTER_ADDR_WIDTH = 32, DT = integer, ASSIGNMENT = CONSTANT, BUS = M_AXI_MASTER
PARAMETER C_M_AXI_MASTER_DATA_WIDTH = 32, DT = integer, RANGE = (32, 64, 128, 256), BUS = M_AXI_MASTER
PARAMETER C_M_AXI_MASTER_AWUSER_WIDTH = 1, DT = integer, ISVALID = (C_M_AXI_MASTER_SUPPORTS_USER_SIGNALS == 1), BUS = M_AXI_MASTER
PARAMETER C_M_AXI_MASTER_ARUSER_WIDTH = 1, DT = integer, ISVALID = (C_M_AXI_MASTER_SUPPORTS_USER_SIGNALS == 1), BUS = M_AXI_MASTER
PARAMETER C_M_AXI_MASTER_WUSER_WIDTH = 1, DT = integer, ISVALID = (C_M_AXI_MASTER_SUPPORTS_USER_SIGNALS == 1), BUS = M_AXI_MASTER
PARAMETER C_M_AXI_MASTER_RUSER_WIDTH = 1, DT = integer, ISVALID = (C_M_AXI_MASTER_SUPPORTS_USER_SIGNALS == 1), BUS = M_AXI_MASTER
PARAMETER C_M_AXI_MASTER_BUSER_WIDTH = 1, DT = integer, ISVALID = (C_M_AXI_MASTER_SUPPORTS_USER_SIGNALS == 1), BUS = M_AXI_MASTER
PARAMETER C_M_AXI_MASTER_TARGET_ADDR = 0x00000000, DT = std_logic_vector, BUS = M_AXI_MASTER
PARAMETER C_M_AXI_MASTER_USER_VALUE = 0b0000, DT = std_logic_vector, BUS = M_AXI_MASTER
PARAMETER C_M_AXI_MASTER_PROT_VALUE = 0b010, DT = std_logic_vector, BUS = M_AXI_MASTER
PARAMETER C_M_AXI_MASTER_CACHE_VALUE = 0b0000, DT = std_logic_vector, BUS = M_AXI_MASTER
## Ports
PORT m_axi_master_ACLK = "", BUS = M_AXI_MASTER, DIR = I, SIGIS = CLK, ASSIGNMENT = REQUIRE
PORT m_axi_master_ARESETN = ARESETN, BUS = M_AXI_MASTER, DIR = I, SIGIS = RST
PORT m_axi_master_AWID = AWID, BUS = M_AXI_MASTER, DIR = O, VEC = [(C_M_AXI_MASTER_THREAD_ID_WIDTH-1):0]
PORT m_axi_master_AWADDR = AWADDR, BUS = M_AXI_MASTER, DIR = O, VEC = [(C_M_AXI_MASTER_ADDR_WIDTH-1):0]
PORT m_axi_master_AWLEN = AWLEN, BUS = M_AXI_MASTER, DIR = O, VEC = [7:0]
PORT m_axi_master_AWSIZE = AWSIZE, BUS = M_AXI_MASTER, DIR = O, VEC = [2:0]
PORT m_axi_master_AWBURST = AWBURST, BUS = M_AXI_MASTER, DIR = O, VEC = [1:0]
PORT m_axi_master_AWLOCK = AWLOCK, BUS = M_AXI_MASTER, DIR = O, VEC = [1:0]
PORT m_axi_master_AWCACHE = AWCACHE, BUS = M_AXI_MASTER, DIR = O, VEC = [3:0]
PORT m_axi_master_AWPROT = AWPROT, BUS = M_AXI_MASTER, DIR = O, VEC = [2:0]
PORT m_axi_master_AWQOS = AWQOS, BUS = M_AXI_MASTER, DIR = O, VEC = [3:0]
PORT m_axi_master_AWUSER = AWUSER, BUS = M_AXI_MASTER, DIR = O, VEC = [(C_M_AXI_MASTER_AWUSER_WIDTH-1):0]
PORT m_axi_master_AWVALID = AWVALID, BUS = M_AXI_MASTER, DIR = O
PORT m_axi_master_AWREADY = AWREADY, BUS = M_AXI_MASTER, DIR = I
PORT m_axi_master_WDATA = WDATA, BUS = M_AXI_MASTER, DIR = O, VEC = [(C_M_AXI_MASTER_DATA_WIDTH-1):0]
PORT m_axi_master_WSTRB = WSTRB, BUS = M_AXI_MASTER, DIR = O, VEC = [((C_M_AXI_MASTER_DATA_WIDTH/8)-1):0]
PORT m_axi_master_WLAST = WLAST, BUS = M_AXI_MASTER, DIR = O
PORT m_axi_master_WUSER = WUSER, BUS = M_AXI_MASTER, DIR = O, VEC = [(C_M_AXI_MASTER_WUSER_WIDTH-1):0]
PORT m_axi_master_WVALID = WVALID, BUS = M_AXI_MASTER, DIR = O
PORT m_axi_master_WREADY = WREADY, BUS = M_AXI_MASTER, DIR = I
PORT m_axi_master_BID = BID, BUS = M_AXI_MASTER, DIR = I, VEC = [(C_M_AXI_MASTER_THREAD_ID_WIDTH-1):0]
PORT m_axi_master_BRESP = BRESP, BUS = M_AXI_MASTER, DIR = I, VEC = [1:0]
PORT m_axi_master_BUSER = BUSER, BUS = M_AXI_MASTER, DIR = I, VEC = [(C_M_AXI_MASTER_BUSER_WIDTH-1):0]
PORT m_axi_master_BVALID = BVALID, BUS = M_AXI_MASTER, DIR = I
PORT m_axi_master_BREADY = BREADY, BUS = M_AXI_MASTER, DIR = O
PORT m_axi_master_ARID = ARID, BUS = M_AXI_MASTER, DIR = O, VEC = [(C_M_AXI_MASTER_THREAD_ID_WIDTH-1):0]
PORT m_axi_master_ARADDR = ARADDR, BUS = M_AXI_MASTER, DIR = O, VEC = [(C_M_AXI_MASTER_ADDR_WIDTH-1):0]
PORT m_axi_master_ARLEN = ARLEN, BUS = M_AXI_MASTER, DIR = O, VEC = [7:0]
PORT m_axi_master_ARSIZE = ARSIZE, BUS = M_AXI_MASTER, DIR = O, VEC = [2:0]
PORT m_axi_master_ARBURST = ARBURST, BUS = M_AXI_MASTER, DIR = O, VEC = [1:0]
PORT m_axi_master_ARLOCK = ARLOCK, BUS = M_AXI_MASTER, DIR = O, VEC = [1:0]
PORT m_axi_master_ARCACHE = ARCACHE, BUS = M_AXI_MASTER, DIR = O, VEC = [3:0]
PORT m_axi_master_ARPROT = ARPROT, BUS = M_AXI_MASTER, DIR = O, VEC = [2:0]
PORT m_axi_master_ARQOS = ARQOS, BUS = M_AXI_MASTER, DIR = O, VEC = [3:0]
PORT m_axi_master_ARUSER = ARUSER, BUS = M_AXI_MASTER, DIR = O, VEC = [(C_M_AXI_MASTER_ARUSER_WIDTH-1):0]
PORT m_axi_master_ARVALID = ARVALID, BUS = M_AXI_MASTER, DIR = O
PORT m_axi_master_ARREADY = ARREADY, BUS = M_AXI_MASTER, DIR = I
PORT m_axi_master_RID = RID, BUS = M_AXI_MASTER, DIR = I, VEC = [(C_M_AXI_MASTER_THREAD_ID_WIDTH-1):0]
PORT m_axi_master_RDATA = RDATA, BUS = M_AXI_MASTER, DIR = I, VEC = [(C_M_AXI_MASTER_DATA_WIDTH-1):0]
PORT m_axi_master_RRESP = RRESP, BUS = M_AXI_MASTER, DIR = I, VEC = [1:0]
PORT m_axi_master_RLAST = RLAST, BUS = M_AXI_MASTER, DIR = I
PORT m_axi_master_RUSER = RUSER, BUS = M_AXI_MASTER, DIR = I, VEC = [(C_M_AXI_MASTER_RUSER_WIDTH-1):0]
PORT m_axi_master_RVALID = RVALID, BUS = M_AXI_MASTER, DIR = I
PORT m_axi_master_RREADY = RREADY, BUS = M_AXI_MASTER, DIR = O
########################################################


END
